@page
@model ChangePasswordModel
@{
    ViewData["Title"] = "Change password";
    ViewData["ActivePage"] = ManageNavPages.ChangePassword;
}

<h3>@ViewData["Title"]</h3>
<partial name="_StatusMessage" for="StatusMessage" />

<div class="row">
    <div class="col-md-6">
        <form id="change-password-form" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
            @Html.AntiForgeryToken()
            <div class="form-floating mb-3">
                <input asp-for="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
                <label asp-for="Input.OldPassword" class="form-label"></label>
                <span asp-validation-for="Input.OldPassword" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                <label asp-for="Input.NewPassword" class="form-label"></label>
                <span asp-validation-for="Input.NewPassword" class="text-danger"></span>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                <label asp-for="Input.ConfirmPassword" class="form-label"></label>
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
        </form>
    </div>
</div>

<!-- Loading Spinner -->
<div id="loading" style="display:none;">
    <div class="spinner"></div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/lib/stellar-sdk/stellar-sdk.min.js" asp-append-version="true"></script>
    <script src="~/js/stellartools.js" asp-append-version="true"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Fetch encrypted keypairs when the page loads
            fetch('/api/Keypairs/GetEncryptedKeypairs')
                .then(response => response.json())
                .then(data => {
                    window.encryptedKeypairs = data;
                })
                .catch(error => {
                    console.error('Error fetching keypairs:', error);
                });
        });

        document.getElementById('change-password-form').addEventListener('submit', async function (e) {
            e.preventDefault();

            // Show loading indicator
            document.getElementById('loading').style.display = 'flex';

            const oldPassword = document.getElementById('Input_OldPassword').value;
            const newPassword = document.getElementById('Input_NewPassword').value;

            const reEncryptedKeypairs = [];

            try {
                for (let i = 0; i < window.encryptedKeypairs.length; i++) {
                    const keypair = window.encryptedKeypairs[i];
                    const decryptedSecretKey = await decryptSecret(keypair.encryptedSecret, oldPassword);

                    // Derive public key from the decrypted secret key
                    const derivedPublicKey = StellarSdk.Keypair.fromSecret(decryptedSecretKey).publicKey();

                    if (derivedPublicKey !== keypair.publicKey) {
                        throw new Error('Decrypted keypair does not match stored public key.');
                    }

                    // Re-encrypt the secret key with the new password
                    const reEncryptedSecretKey = await getEncryptedSecret(decryptedSecretKey, newPassword);

                    // Push to the reEncryptedKeypairs array
                    reEncryptedKeypairs.push({
                        id: keypair.id,
                        encryptedSecret: reEncryptedSecretKey
                    });
                }

                // Make AJAX POST request to update encrypted keypairs
                const response = await fetch('/api/Keypairs/UpdateEncryptedKeypairs', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ reEncryptedKeypairs })
                });

                if (response.ok) {
                    // Password change successful
                    alert('Password changed successfully.');
                    window.location.reload();
                } else {
                    const errorText = await response.text();
                    throw new Error(errorText);
                }
            } catch (error) {
                console.error('Error during password change:', error);
                alert(error.message || 'An unexpected error occurred. Please try again.');
            } finally {
                // Hide loading indicator
                document.getElementById('loading').style.display = 'none';
            }
        });
    </script>
}
